{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\froman\fcharset0 TimesNewRomanPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Ewan Notes for 
\f1\b\fs37 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 An optimized blockwise nonlocal means denoising filter for 3-D magnetic resonance images\
\
\
Classic non local means: 
\f0\b0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic Screen Shot 2020-11-10 at 11.09.09 PM.png \width5980 \height2080 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
Where the u(xj) is the intensity of the voxel xj (3d pixel)\
And w(xi,xj) is the weight assigned to it relative to the output voxel in the space\
This is then summed with all of the one in the neighbourhood to get the output\
\

\fs36 Weight is computed as 
\fs24 {{\NeXTGraphic Screen Shot 2020-11-10 at 11.13.05 PM.png \width5260 \height1820 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\
Zi normalized so the summation equals one\
H is smoothing parameter controls decay\
	if H is high all voxels will have the same weight with respect to input Vox which would be strong smoothing\
\
\
\
\
\

\b\fs36 \cf2 Improvements they proposes\
\

\fs28 1. Automatic tuning of smoothing parameter\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'a0standard deviation of the noise\'a0
\i \uc0\u963 
\i0 \

\i h
\i0\fs20\fsmilli10153 2
\fs32 \'a0=\'a0
\i f
\i0 (
\i \uc0\u963 
\i0\fs20\fsmilli10153 2
\fs32 , |
\i N
\fs27 i
\i0\fs32 |,\'a0
\i \uc0\u946 
\i0 ) where\'a0
\i \uc0\u946 
\i0 \'a0is a constant. Let us show how we can estimate this relationship:
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic Screen Shot 2020-11-10 at 11.21.17 PM.png \width13640 \height4940 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\

\b\fs36 2. Voxel selection in the search volume\

\b0\fs24 only compute the voxels that we know have the highest weight to make it faster\
(Ignore voxels with smaller weights)\
-selction is based on a mean value of the neighbourhood and the gradient selection is done as follows\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2020-11-10 at 11.24.28 PM.png \width14480 \height3080 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\

\b\fs36 3. blockwise Implementation \
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 a) dividing the volume into blocks with overlapping supports, b) performing NL-means-like restoration of these blocks and c) restoring the voxels values based on the restored values of the blocks they belong to.\
(Don\'92t fully get this part come back to)\
\
\

\b\fs36 4. Parallel compuation \
\pard\pardeftab720\sl360\partightenfactor0

\b0\fs32 \cf2 We divide the volume into sub-volumes, each of them being treated separately by one processor. A server with 8 Xeon processors at 3 GHz and a Intel(R) Pentium(R) D CPU 3.40GHz were used in our experiments\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \
}